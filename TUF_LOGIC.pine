// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/

//@version=6
// @description [PINE V6] Three-Value Logic (TUF: True, Uncertain, False) implementation for Pine Script. 
// This library provides a comprehensive set of logical operations supporting trilean logic systems, 
// including Kleene, Łukasiewicz, and RM3 implications. Compatible with Pine v6 enums.
library("TUF_LOGIC")

// @enum Trilean
// @description Represents a Trilean (Three-Valued Logic) state: True, Uncertain, or False. These named constants replace the integer values (1, 0, -1) from previous versions.
export enum Trilean
	True = "True"
	Uncertain = "Uncertain"
	False = "False"

// @function Ensures a valid trilean integer value by clamping to the appropriate range [-1, 1].
// @param self The integer value to validate.
// @returns An integer value guaranteed to be within the valid trilean range.
export method validate(series int self)=>
	math.min(math.max(self, -1), 1)

// @function Converts an integer value to a Trilean enum value.
// @param self The integer to convert (typically -1, 0, or 1).
// @returns A Trilean enum value: True (1), Uncertain (0), or False (-1).
export method to_trilean(series int self)=>
	int value = self.validate()
	Trilean return_value = switch
		value == 1 => Trilean.True
		value == 0 => Trilean.Uncertain
		value == -1 => Trilean.False
		=> na
	return_value

// @function Converts a Trilean enum value to its corresponding integer representation.
// @param self The Trilean enum value to convert.
// @returns Integer value: 1 (True), 0 (Uncertain), or -1 (False).
export method to_int(series Trilean self)=>
	int return_value = switch self
		Trilean.True => 1
		Trilean.Uncertain => 0
		Trilean.False => -1
	return_value

// @function Negates a trilean integer value (NOT operation).
// @param self The integer value to negate.
// @returns Negated integer value: 1 -> -1, 0 -> 0, -1 -> 1.
export method NOT(series int self)=>
	self.validate() * -1

// @function Negates a Trilean enum value (NOT operation).
// @param self The Trilean enum value to negate.
// @returns Negated Trilean: True -> False, Uncertain -> Uncertain, False -> True.
export method NOT(series Trilean self)=>
	Trilean return_value = switch self
		Trilean.True => Trilean.False
		Trilean.Uncertain => Trilean.Uncertain
		Trilean.False => Trilean.True
	return_value

// @function Logical AND operation for trilean integer values.
// @param self The first integer value.
// @param comparator The second integer value to compare with.
// @returns Integer result of the AND operation (minimum value).
export method AND(series int self, series int comparator)=>
	math.min(self.validate(), comparator.validate())

// @function Logical AND operation for Trilean enum values following three-valued logic.
// @param self The first Trilean enum value.
// @param comparator The second Trilean enum value to compare with.
// @returns Trilean result of the AND operation.
export method AND(series Trilean self, series Trilean comparator)=>
	if self == comparator
		self
	else if self == Trilean.True
		comparator
	else if comparator == Trilean.True
		self
	else if self == Trilean.Uncertain
		comparator
	else
		self

// @function Logical OR operation for trilean integer values.
// @param self The first integer value.
// @param comparator The second integer value to compare with.
// @returns Integer result of the OR operation (maximum value).
export method OR(series int self, series int comparator)=>
	math.max(self.validate(), comparator.validate())

// @function Logical OR operation for Trilean enum values following three-valued logic.
// @param self The first Trilean enum value.
// @param comparator The second Trilean enum value to compare with.
// @returns Trilean result of the OR operation.
export method OR(series Trilean self, series Trilean comparator)=>
	if self == comparator
		self
	else if self == Trilean.False
		comparator
	else if comparator == Trilean.False
		self
	else if self == Trilean.Uncertain
		comparator
	else
		self

// @function Logical EQUALITY operation for trilean integer values.
// @param self The first integer value.
// @param comparator The second integer value to compare with.
// @returns Integer representation (1/-1) indicating if values are equal.
export method EQUALITY(series int self, series int comparator)=>
	int return_value = switch 
		self.validate() == comparator.validate() => 1
		=> -1
	return_value

// @function Logical EQUALITY operation for Trilean enum values.
// @param self The first Trilean enum value.
// @param comparator The second Trilean enum value to compare with.
// @returns Trilean.True if both values are equal, Trilean.False otherwise.
export method EQUALITY(series Trilean self, series Trilean comparator)=>
	Trilean return_value = switch self
		comparator => Trilean.True
		=> Trilean.False
	return_value

// @function Logical XOR (Exclusive OR) operation for trilean integer values.
// @param self The first integer value.
// @param comparator The second integer value to compare with.
// @returns Integer result of the XOR operation.
export method XOR(series int self, series int comparator)=>
	int valid_self = self.validate()
	int valid_comparator = comparator.validate()
	int return_value = valid_self.OR(valid_comparator).AND(valid_self.AND(valid_comparator).NOT())
	return_value

// @function Logical XOR (Exclusive OR) operation for Trilean enum values.
// @param self The first Trilean enum value.
// @param comparator The second Trilean enum value to compare with.
// @returns Trilean result of the XOR operation.
export method XOR(series Trilean self, series Trilean comparator)=>
	self.OR(comparator).AND(self.AND(comparator).NOT())

// @function Material implication using Kleene's logic for trilean integer values.
// @param self The antecedent integer value.
// @param comparator The consequent integer value.
// @returns Integer result of Kleene's implication operation.
export method IMP_K(series int self, series int comparator)=>
	self.NOT().OR(comparator.validate())

// @function Material implication using Kleene's logic for Trilean enum values.
// @param self The antecedent Trilean enum value.
// @param comparator The consequent Trilean enum value.
// @returns Trilean result of Kleene's implication operation.
export method IMP_K(series Trilean self, series Trilean comparator)=>
	self.NOT().OR(comparator)

// @function Logical implication using Łukasiewicz's logic for trilean integer values.
// @param self The antecedent integer value.
// @param comparator The consequent integer value.
// @returns Integer result of Łukasiewicz's implication operation.
export method IMP_L(series int self, series int comparator)=>
	math.min(1, 1 - self.validate() + comparator.validate())

// @function Logical implication using Łukasiewicz's logic for Trilean enum values.
// @param self The antecedent Trilean enum value.
// @param comparator The consequent Trilean enum value.
// @returns Trilean result of Łukasiewicz's implication operation.
export method IMP_L(series Trilean self, series Trilean comparator)=>
	Trilean return_value = Trilean.True

	if self == Trilean.True
		if comparator == Trilean.False
			return_value := Trilean.False
		else if comparator == Trilean.Uncertain
			return_value := Trilean.Uncertain
	else if self == Trilean.Uncertain and comparator == Trilean.False
		return_value := Trilean.Uncertain

	return_value

// @function Logical implication using RM3 logic for trilean integer values.
// @param self The antecedent integer value.
// @param comparator The consequent integer value.
// @returns Integer result of the RM3 implication operation.
export method IMP_RM3(series int self, series int comparator)=>
	int valid_self = self.validate()
	int valid_comparator = comparator.validate()

	int return_value = -1

	if valid_self == -1 or valid_comparator == 1
		return_value := 1
	else if valid_self == 0 and valid_comparator == 0
		return_value := 0

	return_value

// @function Logical implication using RM3 logic for Trilean enum values.
// @param self The antecedent Trilean enum value.
// @param comparator The consequent Trilean enum value.
// @returns Trilean result of the RM3 implication operation.
export method IMP_RM3(series Trilean self, series Trilean comparator)=>
	Trilean return_value = Trilean.False

	if self == Trilean.False or comparator == Trilean.True
		return_value := Trilean.True
	else if self == Trilean.Uncertain and comparator == Trilean.Uncertain
		return_value := Trilean.Uncertain

	return_value

// @function Modal Assertion (MA) operation for trilean integer values.
// @param self The integer value to evaluate.
// @returns 1 if the value is 1 or 0, -1 if the value is -1.
export method MA(series int self)=>
	int return_value = 1
	if self.validate() == -1
		return_value := -1
	return_value

// @function Modal Assertion (MA) operation for Trilean enum values.
// @param self The Trilean enum value to evaluate.
// @returns Trilean.True if value is True or Uncertain, Trilean.False if value is False.
export method MA(series Trilean self)=>
	Trilean return_value = Trilean.True
	if self == Trilean.False
		return_value := Trilean.False
	return_value

// @function Logical Assertion (LA) operation for trilean integer values.
// @param self The integer value to evaluate.
// @returns 1 if the value is 1, -1 otherwise.
export method LA(series int self)=>
	int return_value = -1
	if self.validate() == 1
		return_value := 1
	return_value

// @function Logical Assertion (LA) operation for Trilean enum values.
// @param self The Trilean enum value to evaluate.
// @returns Trilean.True if value is True, Trilean.False otherwise.
export method LA(series Trilean self)=>
	Trilean return_value = Trilean.False
	if self == Trilean.True
		return_value := Trilean.True
	return_value

// @function Indeterminacy Assertion (IA) operation for trilean integer values.
// @param self The integer value to evaluate.
// @returns 1 if the value is 0, -1 otherwise.
export method IA(series int self)=>
	int return_value = -1
	if self.validate() == 0
		return_value := 1
	return_value

// @function Indeterminacy Assertion (IA) operation for Trilean enum values.
// @param self The Trilean enum value to evaluate.
// @returns Trilean.True if value is Uncertain, Trilean.False otherwise.
export method IA(series Trilean self)=>
	Trilean return_value = Trilean.False
	if self == Trilean.Uncertain
		return_value := Trilean.True
	return_value

// @function Evaluates the unanimity between two trilean integer values.
// @param self The first integer value.
// @param comparator The second integer value.
// @returns Integer value of self if both values are equal, 0 (Uncertain) otherwise.
export method UNANIMOUS(series int self, series int comparator)=>
	int valid_self = self.validate()
	int valid_comparator = comparator.validate()

	int return_value = 0

	if valid_self == valid_comparator
		return_value := self

	return_value

// @function Evaluates the unanimity between two Trilean enum values.
// @param self The first Trilean enum value.
// @param comparator The second Trilean enum value.
// @returns Value of self if both values are equal, Trilean.Uncertain otherwise.
export method UNANIMOUS(series Trilean self, series Trilean comparator)=>
	Trilean return_value = Trilean.Uncertain

	if self == comparator
		return_value := self

	return_value
		

// @function Evaluates the unanimity among an array of trilean integer values.
// @param self The array of integer values.
// @returns First value if all values are identical, 0 (Uncertain) otherwise.
export method UNANIMOUS(series int[] self)=>
	int return_value = 0
	if self.size() > 0
		int first_value = self.get(0).validate()

		if first_value != 0
			bool no_true = self.indexof(1) == -1
			bool no_uncertain = self.indexof(0) == -1
			bool no_false = self.indexof(-1) == -1

			bool unanimous = switch first_value
				1 => no_false and no_uncertain
				-1 => no_true and no_uncertain
				=> false

			if unanimous
				return_value := first_value
	return_value

// @function Evaluates the unanimity among an array of Trilean enum values.
// @param self The array of Trilean enum values.
// @returns First value if all values are identical, Trilean.Uncertain otherwise.
export method UNANIMOUS(series Trilean[] self)=>
	Trilean return_value = Trilean.Uncertain
	if self.size() > 0
		Trilean first_value = self.get(0)

		if first_value != Trilean.Uncertain
			bool no_true = self.indexof(Trilean.True) == -1
			bool no_uncertain = self.indexof(Trilean.Uncertain) == -1
			bool no_false = self.indexof(Trilean.False) == -1

			bool unanimous = switch first_value
				Trilean.True => no_false and no_uncertain
				Trilean.False => no_true and no_uncertain
				=> false

			if unanimous
				return_value := first_value
	return_value

// EXAMPLE {

float rsi = ta.rsi(close, 14)
float mfi = ta.mfi(close, 14)
[_, st] = ta.supertrend(3, 10)

Trilean rsi_state = to_trilean(rsi > 69 ? 1 : rsi < 31 ? -1 : 0)
Trilean mfi_state = to_trilean(mfi > 69 ? 1 : mfi < 31 ? -1 : 0)
Trilean st_state = to_trilean(int(st)).NOT()

Trilean[] states = array.from(rsi_state, mfi_state, st_state)

plot(states.UNANIMOUS().to_int())

// }
